// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/statechannels/go-nitro/rpc (interfaces: RpcClientApi)

// Package mock_rpc is a generated GoMock package.
package mock_rpc

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	outcome "github.com/statechannels/go-nitro/channel/state/outcome"
	query "github.com/statechannels/go-nitro/node/query"
	payments "github.com/statechannels/go-nitro/payments"
	protocols "github.com/statechannels/go-nitro/protocols"
	directfund "github.com/statechannels/go-nitro/protocols/directfund"
	virtualfund "github.com/statechannels/go-nitro/protocols/virtualfund"
	serde "github.com/statechannels/go-nitro/rpc/serde"
	types "github.com/statechannels/go-nitro/types"
)

// MockRpcClientApi is a mock of RpcClientApi interface.
type MockRpcClientApi struct {
	ctrl     *gomock.Controller
	recorder *MockRpcClientApiMockRecorder
}

// MockRpcClientApiMockRecorder is the mock recorder for MockRpcClientApi.
type MockRpcClientApiMockRecorder struct {
	mock *MockRpcClientApi
}

// NewMockRpcClientApi creates a new mock instance.
func NewMockRpcClientApi(ctrl *gomock.Controller) *MockRpcClientApi {
	mock := &MockRpcClientApi{ctrl: ctrl}
	mock.recorder = &MockRpcClientApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcClientApi) EXPECT() *MockRpcClientApiMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockRpcClientApi) Address() (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Address indicates an expected call of Address.
func (mr *MockRpcClientApiMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockRpcClientApi)(nil).Address))
}

// Close mocks base method.
func (m *MockRpcClientApi) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRpcClientApiMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRpcClientApi)(nil).Close))
}

// CloseLedgerChannel mocks base method.
func (m *MockRpcClientApi) CloseLedgerChannel(arg0 types.Destination) (protocols.ObjectiveId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLedgerChannel", arg0)
	ret0, _ := ret[0].(protocols.ObjectiveId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLedgerChannel indicates an expected call of CloseLedgerChannel.
func (mr *MockRpcClientApiMockRecorder) CloseLedgerChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLedgerChannel", reflect.TypeOf((*MockRpcClientApi)(nil).CloseLedgerChannel), arg0)
}

// ClosePaymentChannel mocks base method.
func (m *MockRpcClientApi) ClosePaymentChannel(arg0 types.Destination) (protocols.ObjectiveId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePaymentChannel", arg0)
	ret0, _ := ret[0].(protocols.ObjectiveId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClosePaymentChannel indicates an expected call of ClosePaymentChannel.
func (mr *MockRpcClientApiMockRecorder) ClosePaymentChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePaymentChannel", reflect.TypeOf((*MockRpcClientApi)(nil).ClosePaymentChannel), arg0)
}

// CreateLedgerChannel mocks base method.
func (m *MockRpcClientApi) CreateLedgerChannel(arg0 common.Address, arg1 uint32, arg2 outcome.Exit) (directfund.ObjectiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedgerChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(directfund.ObjectiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedgerChannel indicates an expected call of CreateLedgerChannel.
func (mr *MockRpcClientApiMockRecorder) CreateLedgerChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedgerChannel", reflect.TypeOf((*MockRpcClientApi)(nil).CreateLedgerChannel), arg0, arg1, arg2)
}

// CreatePaymentChannel mocks base method.
func (m *MockRpcClientApi) CreatePaymentChannel(arg0 []common.Address, arg1 common.Address, arg2 uint32, arg3 outcome.Exit) (virtualfund.ObjectiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentChannel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(virtualfund.ObjectiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentChannel indicates an expected call of CreatePaymentChannel.
func (mr *MockRpcClientApiMockRecorder) CreatePaymentChannel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentChannel", reflect.TypeOf((*MockRpcClientApi)(nil).CreatePaymentChannel), arg0, arg1, arg2, arg3)
}

// CreateVoucher mocks base method.
func (m *MockRpcClientApi) CreateVoucher(arg0 types.Destination, arg1 uint64) (payments.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoucher", arg0, arg1)
	ret0, _ := ret[0].(payments.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoucher indicates an expected call of CreateVoucher.
func (mr *MockRpcClientApiMockRecorder) CreateVoucher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoucher", reflect.TypeOf((*MockRpcClientApi)(nil).CreateVoucher), arg0, arg1)
}

// GetAllLedgerChannels mocks base method.
func (m *MockRpcClientApi) GetAllLedgerChannels() ([]query.LedgerChannelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLedgerChannels")
	ret0, _ := ret[0].([]query.LedgerChannelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLedgerChannels indicates an expected call of GetAllLedgerChannels.
func (mr *MockRpcClientApiMockRecorder) GetAllLedgerChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLedgerChannels", reflect.TypeOf((*MockRpcClientApi)(nil).GetAllLedgerChannels))
}

// GetLedgerChannel mocks base method.
func (m *MockRpcClientApi) GetLedgerChannel(arg0 types.Destination) (query.LedgerChannelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedgerChannel", arg0)
	ret0, _ := ret[0].(query.LedgerChannelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedgerChannel indicates an expected call of GetLedgerChannel.
func (mr *MockRpcClientApiMockRecorder) GetLedgerChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedgerChannel", reflect.TypeOf((*MockRpcClientApi)(nil).GetLedgerChannel), arg0)
}

// GetPaymentChannel mocks base method.
func (m *MockRpcClientApi) GetPaymentChannel(arg0 types.Destination) (query.PaymentChannelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentChannel", arg0)
	ret0, _ := ret[0].(query.PaymentChannelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentChannel indicates an expected call of GetPaymentChannel.
func (mr *MockRpcClientApiMockRecorder) GetPaymentChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentChannel", reflect.TypeOf((*MockRpcClientApi)(nil).GetPaymentChannel), arg0)
}

// GetPaymentChannelsByLedger mocks base method.
func (m *MockRpcClientApi) GetPaymentChannelsByLedger(arg0 types.Destination) ([]query.PaymentChannelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentChannelsByLedger", arg0)
	ret0, _ := ret[0].([]query.PaymentChannelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentChannelsByLedger indicates an expected call of GetPaymentChannelsByLedger.
func (mr *MockRpcClientApiMockRecorder) GetPaymentChannelsByLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentChannelsByLedger", reflect.TypeOf((*MockRpcClientApi)(nil).GetPaymentChannelsByLedger), arg0)
}

// LedgerChannelUpdatesChan mocks base method.
func (m *MockRpcClientApi) LedgerChannelUpdatesChan(arg0 types.Destination) <-chan query.LedgerChannelInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LedgerChannelUpdatesChan", arg0)
	ret0, _ := ret[0].(<-chan query.LedgerChannelInfo)
	return ret0
}

// LedgerChannelUpdatesChan indicates an expected call of LedgerChannelUpdatesChan.
func (mr *MockRpcClientApiMockRecorder) LedgerChannelUpdatesChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LedgerChannelUpdatesChan", reflect.TypeOf((*MockRpcClientApi)(nil).LedgerChannelUpdatesChan), arg0)
}

// ObjectiveCompleteChan mocks base method.
func (m *MockRpcClientApi) ObjectiveCompleteChan(arg0 protocols.ObjectiveId) <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectiveCompleteChan", arg0)
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// ObjectiveCompleteChan indicates an expected call of ObjectiveCompleteChan.
func (mr *MockRpcClientApiMockRecorder) ObjectiveCompleteChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectiveCompleteChan", reflect.TypeOf((*MockRpcClientApi)(nil).ObjectiveCompleteChan), arg0)
}

// Pay mocks base method.
func (m *MockRpcClientApi) Pay(arg0 types.Destination, arg1 uint64) (serde.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", arg0, arg1)
	ret0, _ := ret[0].(serde.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pay indicates an expected call of Pay.
func (mr *MockRpcClientApiMockRecorder) Pay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockRpcClientApi)(nil).Pay), arg0, arg1)
}

// PaymentChannelUpdatesChan mocks base method.
func (m *MockRpcClientApi) PaymentChannelUpdatesChan(arg0 types.Destination) <-chan query.PaymentChannelInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentChannelUpdatesChan", arg0)
	ret0, _ := ret[0].(<-chan query.PaymentChannelInfo)
	return ret0
}

// PaymentChannelUpdatesChan indicates an expected call of PaymentChannelUpdatesChan.
func (mr *MockRpcClientApiMockRecorder) PaymentChannelUpdatesChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentChannelUpdatesChan", reflect.TypeOf((*MockRpcClientApi)(nil).PaymentChannelUpdatesChan), arg0)
}

// ReceiveVoucher mocks base method.
func (m *MockRpcClientApi) ReceiveVoucher(arg0 payments.Voucher) (payments.ReceiveVoucherSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveVoucher", arg0)
	ret0, _ := ret[0].(payments.ReceiveVoucherSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveVoucher indicates an expected call of ReceiveVoucher.
func (mr *MockRpcClientApiMockRecorder) ReceiveVoucher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveVoucher", reflect.TypeOf((*MockRpcClientApi)(nil).ReceiveVoucher), arg0)
}
